{"version":3,"sources":["api/api.js","redux/authReducer.js","redux/userReducer.js","redux/store.js","utils/validators.js","utils/FormElements.jsx","components/Login/LoginForm/LoginForm.jsx","components/Login/Login.jsx","redux/userSelectors.js","components/User/UserForm/UserForm.jsx","redux/authSelectors.js","components/User/User.jsx","App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","baseURL","headers","authApi","username","password","data","post","then","response","defaults","common","token","catch","error","userApi","userData","userName","first_name","firstName","last_name","lastName","is_active","isActive","resultCode","put","userId","console","log","SET_AUTH_DATA","initialState","isAuth","setAuthData","type","authReducer","state","action","SET_USER_DATA","SET_EDIT_MODE","editMode","setUserData","setEditMode","value","userReducer","reducers","combineReducers","auth","user","form","formReducer","store","createStore","applyMiddleware","thunk","required","maxLengthCreator","maxLength","length","maxLength150","maxLength128","maxLength30","userNamePattern","test","passwordPattern","Input","input","meta","props","inputClassName","touched","className","reduxForm","onSubmit","handleSubmit","Field","placeholder","name","component","validate","connect","authorizeUser","dispatch","a","isAuthSuccess","stopSubmit","_error","to","formData","login","getIsUserCreated","getUserId","getUserName","getFirstName","getLastName","getEditMode","compose","initialValues","getIsAuth","isUserCreated","changeUser","createUser","id","onClick","App","exact","from","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4TAEIA,E,OAAgBC,OAAa,CAC7BC,QAAS,mDACTC,QAAS,CACL,eAAgB,sBAIXC,EAAU,SACNC,EAAUC,GACnB,IAAMC,EAAO,CAACF,WAAUC,YACxB,OAAON,EAAcQ,KAAK,mBAAoBD,GACzCE,MAAK,SAAAC,GAEF,OADAV,EAAcW,SAASR,QAAQS,OAA/B,8BAAkEF,EAASH,KAAKM,QACzE,KAEVC,OAAM,SAAAC,GACH,OAAO,MAKVC,EAAU,SACRC,GACP,OAAOjB,EAAcQ,KAAK,iBAAkB,CACxCH,SAAUY,EAASC,SACnBC,WAAYF,EAASG,UACrBC,UAAWJ,EAASK,SACpBC,UAAWN,EAASO,SACpBlB,SAAUW,EAASX,WACpBG,MAAK,SAAAC,GACJ,MAAO,CACHe,WAAY,EACZlB,KAAMG,EAASH,SAEpBO,OAAM,SAAAC,GACL,MAAO,CACHU,WAAY,EACZlB,KAAMQ,EAAML,SAASH,UAhBxBS,EAAU,SAoBRC,GACP,OAAOjB,EAAc0B,IAAd,wBAAmCT,EAASU,OAA5C,KAAuD,CAC1DtB,SAAUY,EAASC,SACnBC,WAAYF,EAASG,UACrBC,UAAWJ,EAASK,SACpBC,UAAWN,EAASO,SACpBlB,SAAUW,EAASX,WACpBG,MAAK,SAAAC,GACJ,MAAO,CACHe,WAAY,EACZlB,KAAMG,EAASH,SAEpBO,OAAM,SAAAC,GAEL,OADAa,QAAQC,IAAId,EAAML,UACX,CACHe,WAAY,EACZlB,KAAMQ,EAAML,SAASH,U,QCxD/BuB,EAAgB,oCAEhBC,EAAe,CACjBb,SAAU,GACVc,QAAQ,GAgBNC,EAAc,SAACf,GAAD,MAAe,CAACgB,KAAKJ,EAAeZ,aAYzCiB,EAzBK,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAClD,OAAQA,EAAOH,MACX,KAAKJ,EACD,OAAO,2BACAM,GADP,IAEIlB,SAAUmB,EAAOnB,SACjBc,QAAQ,IAEhB,QACI,OAAOI,I,kBChBbE,EAAgB,oCAChBC,EAAgB,oCAEhBR,EAAe,CACjBJ,OAAQ,KACRT,SAAU,GACVE,UAAW,GACXE,SAAU,GACVhB,SAAU,GACVkB,UAAU,EACVgB,UAAU,GAmBRC,EAAc,SAACxB,GAAD,MAAe,CAACiB,KAAMI,EAAerB,aAC5CyB,EAAc,SAACC,GAAD,MAAY,CAACT,KAAMK,EAAeI,UAgD9CC,EAjEK,WAAmC,IAAlCR,EAAiC,uDAAzBL,EAAcM,EAAW,uCAClD,OAAQA,EAAOH,MACX,KAAKI,EACD,OAAO,2BACAF,GACAC,EAAOpB,UAElB,KAAKsB,EACD,OAAO,2BACAH,GADP,IAEII,SAAUH,EAAOM,QAEzB,QAAS,OAAOP,ICtBlBS,EAAWC,YAAgB,CAC7BC,KAAMZ,EACNa,KAAMJ,EACNK,KAAMC,MAQKC,EALDC,YACVP,EACAQ,YAAgBC,M,iCCdPC,EAAW,SAACZ,GACrB,IAAIA,EACJ,MAAO,qBAGLa,EAAmB,SAACC,GACtB,OAAO,SAACd,GACJ,GAAIA,GAASA,EAAMe,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,eAKlCE,EAAeH,EAAiB,KAChCI,EAAeJ,EAAiB,KAChCK,EAAcL,EAAiB,IAG/BM,EAAkB,SAACnB,GAC5B,IAAI,cAAcoB,KAAKpB,GACvB,MAAO,0DAGEqB,EAAkB,SAACrB,GAC5B,IAAI,6BAA6BoB,KAAKpB,GACtC,MAAO,0D,SCrBEsB,G,OAAQ,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCACxCC,EAAiB,cAAgBF,EAAKG,SAAWH,EAAKpD,MAAQ,mBAAqB,IACzF,OACI,oCACI,2CAAWmD,EAAUE,EAArB,CAA4BG,UAAWF,KACtCF,EAAKG,SAAWH,EAAKpD,OAClB,yBAAKwD,UAAU,kBAAkBJ,EAAKpD,UCgCvCyD,cAAU,CAACvB,KAAM,SAAjBuB,EApCG,SAACJ,GACf,OACI,0BACIG,UAAU,OACVE,SAAUL,EAAMM,cAEhB,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAY,QACZC,KAAK,QACL3C,KAAK,OACL4C,UAAWb,EACXc,SAAU,CAACxB,MAGnB,6BACI,kBAACoB,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,WACL3C,KAAK,WACL4C,UAAWb,EACXc,SAAU,CAACxB,MAGlBa,EAAMrD,OACH,yBAAKwD,UAAU,yBACVH,EAAMrD,OAGf,6BACI,4BAAQwD,UAAU,eAAlB,eCCDS,eANS,SAAC5C,GACrB,MAAO,CACHJ,OAAQI,EAAMW,KAAKf,UAIa,CACpCiD,cNZyB,SAAC/D,EAAUZ,GACpC,8CAAO,WAAO4E,GAAP,eAAAC,EAAA,sEACyB/E,EAAqBc,EAAUZ,GADxD,OACG8E,EADH,OAGCF,EADAE,EACSnD,EAAYf,GAEZmE,YAAW,QAAS,CAACC,OAAQ,kCALvC,2CAAP,wDMUWN,EA9BD,SAACZ,GAKX,OAAIA,EAAMpC,OAEF,kBAAC,IAAD,CAAUuD,GAAG,UAKjB,6BACI,qCACA,kBAAC,EAAD,CACId,SAdc,SAACe,GACvBpB,EAAMa,cAAcO,EAASC,MAAOD,EAASlF,aAezC,mDACA,wCAAc,wBCxBboF,EAAmB,SAACtD,GAAD,OAAiC,OAAtBA,EAAMY,KAAKrB,QACzCgE,EAAY,SAACvD,GAAD,OAAWA,EAAMY,KAAKrB,QAClCiE,EAAc,SAACxD,GAAD,OAAWA,EAAMY,KAAK9B,UACpC2E,EAAe,SAACzD,GAAD,OAAWA,EAAMY,KAAK5B,WACrC0E,EAAc,SAAC1D,GAAD,OAAWA,EAAMY,KAAK1B,UACpCyE,EAAc,SAAC3D,GAAD,OAAWA,EAAMY,KAAKR,UC4DlCwD,cACXhB,aAAQ,SAAA5C,GAAK,MAAK,CACd6D,cAAe7D,EAAMY,QACrB,IACJwB,YAAU,CAACvB,KAAM,SAJN+C,EAnDE,SAAC5B,GACd,OACI,0BAAMK,SAAUL,EAAMM,cAClB,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,WACL3C,KAAK,OACL4C,UAAWb,EACXc,SAAU,CAACxB,EAAUO,EAAiBH,MAG9C,6BACI,kBAACgB,EAAA,EAAD,CACIC,YAAY,aACZC,KAAK,YACL3C,KAAK,OACL4C,UAAWb,EACXc,SAAU,CAAClB,MAGnB,6BACI,kBAACc,EAAA,EAAD,CACIC,YAAY,YACZC,KAAK,WACL3C,KAAK,OACL4C,UAAWb,EACXc,SAAU,CAACpB,MAGnB,6BACI,kBAACgB,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,WACL3C,KAAK,WACL4C,UAAWb,EACXc,SAAU,CAACxB,EAAUK,EAAcI,MAG1CI,EAAMrD,OACH,yBAAKwD,UAAU,yBACVH,EAAMrD,OAGf,6BACI,4BAAQwD,UAAU,eAAlB,qBC3DH2B,GAAY,SAAC9D,GAAD,OAAWA,EAAMW,KAAKf,QCoEhCgD,gBAZS,SAAC5C,GACrB,MAAO,CACHJ,OAAQkE,GAAU9D,GAClB+D,cAAeT,EAAiBtD,GAChCT,OAAQgE,EAAUvD,GAClBlB,SAAU0E,EAAYxD,GACtBhB,UAAWyE,EAAazD,GACxBd,SAAUwE,EAAY1D,GACtBI,SAAUuD,EAAY3D,MAIU,CACpCgE,WTlCsB,SAACzE,EAAQT,EAAUE,EAAWE,EAAUhB,GAC9D,8CAAO,WAAO4E,GAAP,eAAAC,EAAA,6DACGlE,EAAW,CACbO,UAAU,EACVG,SACAT,WACAE,YACAE,WACAhB,YAPD,SAUkBU,EAAmBC,GAVrC,OAWyB,IAXzB,OAWUQ,YACTyD,EAASzC,EAAYxB,IACrBiE,EAASxC,GAAY,KAErBwC,EAASG,YAAW,OAAQ,CAACC,OAAQ,uBAftC,2CAAP,uDSkCAe,WTdsB,SAACnF,EAAUE,EAAWE,EAAUhB,GACtD,8CAAO,WAAO4E,GAAP,iBAAAC,EAAA,6DACGlE,EAAW,CACbO,UAAU,EACVN,WACAE,YACAE,WACAhB,YAND,SASkBU,EAAmBC,GATrC,OAUyB,KADxBP,EATD,QAUUe,YACTyD,EAASzC,EAAY,2BAAIxB,GAAL,IAAeU,OAAQjB,EAASH,KAAK+F,OACzDpB,EAASxC,GAAY,KAEjBhC,EAASH,KAAKF,SACd6E,EAASG,YAAW,OAAQ,CAACnE,SAAUR,EAASH,KAAKF,YAErD6E,EAASG,YAAW,OAAQ,CAACC,OAAQ,uBAjB1C,2CAAP,uDScA5C,eAHWsC,EArDF,SAACZ,GASV,OAAKA,EAAMpC,OAMP,yBAAKuC,UAAU,QACX,qCACEH,EAAM5B,UACJ,6BACK4B,EAAM+B,eACH,6BACI,wCAAc/B,EAAMlD,UACpB,0CAAgBkD,EAAMhD,WACtB,yCAAegD,EAAM9C,WAG7B,4BACIiD,UAAU,cACVgC,QAAS,kBAAMnC,EAAM1B,aAAY,KAEhC0B,EAAM+B,cAAgB,cAAgB,gBAIlD/B,EAAM5B,UACH,kBAAC,EAAD,CAAUiC,SAlCG,SAACe,GAClBpB,EAAM+B,cACN/B,EAAMgC,WAAWhC,EAAMzC,OAAQ6D,EAAStE,SAAUsE,EAASpE,UAAWoE,EAASlE,SAAUkE,EAASlF,UAElG8D,EAAMiC,WAAWb,EAAStE,SAAUsE,EAASpE,UAAWoE,EAASlE,SAAUkE,EAASlF,cAMpF,kBAAC,IAAD,CAAUiF,GAAG,cCAViB,OAlBf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUrD,MAAOA,GACb,yBAAKoB,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUkC,OAAK,EAACC,KAAK,IAAInB,GAAG,WAC5B,kBAAC,IAAD,CAAOoB,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,GAAD,eCL1CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,GAAD,MACAO,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9G,MAAK,SAAA+G,GACJA,EAAaC,gBAEd3G,OAAM,SAAAC,GACLa,QAAQb,MAAMA,EAAM2G,c","file":"static/js/main.c15c3063.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\nlet axiosInstance = axios.create({\r\n    baseURL: 'https://emphasoft-test-assignment.herokuapp.com/',\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n    },\r\n});\r\n\r\nexport const authApi = {\r\n    getAuthToken(username, password) {\r\n        const data = {username, password};\r\n        return axiosInstance.post('/api-token-auth/', data)\r\n            .then(response => {\r\n                axiosInstance.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;\r\n                return true;\r\n            })\r\n            .catch(error => {\r\n                return false;\r\n            })\r\n    },\r\n};\r\n\r\nexport const userApi = {\r\n    createUser(userData) {\r\n        return axiosInstance.post('/api/v1/users/', {\r\n            username: userData.userName,\r\n            first_name: userData.firstName,\r\n            last_name: userData.lastName,\r\n            is_active: userData.isActive,\r\n            password: userData.password,\r\n        }).then(response => {\r\n            return {\r\n                resultCode: 0,\r\n                data: response.data,\r\n            };\r\n        }).catch(error => {\r\n            return {\r\n                resultCode: 1,\r\n                data: error.response.data,\r\n            };\r\n        })\r\n    },\r\n    updateUser(userData) {\r\n        return axiosInstance.put(`/api/v1/users/${userData.userId}/`, {\r\n            username: userData.userName,\r\n            first_name: userData.firstName,\r\n            last_name: userData.lastName,\r\n            is_active: userData.isActive,\r\n            password: userData.password,\r\n        }).then(response => {\r\n            return {\r\n                resultCode: 0,\r\n                data: response.data\r\n            }\r\n        }).catch(error => {\r\n            console.log(error.response);\r\n            return {\r\n                resultCode: 1,\r\n                data: error.response.data,\r\n            };\r\n        })\r\n    }\r\n};\r\n\r\n\r\n","import {authApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_DATA = 'emphasoft-test/auth/SET_AUTH_DATA';\r\n\r\nconst initialState = {\r\n    userName: '',\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA:\r\n            return {\r\n                ...state,\r\n                userName: action.userName,\r\n                isAuth: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst setAuthData = (userName) => ({type:SET_AUTH_DATA, userName});\r\n\r\nexport const authorizeUser = (userName, password) => {\r\n    return async (dispatch) => {\r\n        const isAuthSuccess = await authApi.getAuthToken(userName, password);\r\n        if (isAuthSuccess) {\r\n            dispatch(setAuthData(userName));\r\n        } else {\r\n            dispatch(stopSubmit('login', {_error: 'Incorrect login or password!'}))\r\n        }\r\n    }\r\n};\r\nexport default authReducer;\r\n","import {userApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'emphasoft-test/user/SET_USER_DATA';\r\nconst SET_EDIT_MODE = 'emphasoft-test/user/SET_EDIT_MODE';\r\n\r\nconst initialState = {\r\n    userId: null,\r\n    userName: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    password: '',\r\n    isActive: true,\r\n    editMode: false,\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.userData,\r\n            };\r\n        case SET_EDIT_MODE :\r\n            return {\r\n                ...state,\r\n                editMode: action.value,\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\n\r\nconst setUserData = (userData) => ({type: SET_USER_DATA, userData,});\r\nexport const setEditMode = (value) => ({type: SET_EDIT_MODE, value});\r\n\r\nexport const changeUser = (userId, userName, firstName, lastName, password) => {\r\n    return async (dispatch) => {\r\n        const userData = {\r\n            isActive: true,\r\n            userId,\r\n            userName,\r\n            firstName,\r\n            lastName,\r\n            password,\r\n        };\r\n\r\n        let response = await userApi.updateUser(userData);\r\n        if (response.resultCode === 0) {\r\n            dispatch(setUserData(userData));\r\n            dispatch(setEditMode(false))\r\n        } else {\r\n            dispatch(stopSubmit('user', {_error: 'Some server error'}))\r\n        }\r\n    }\r\n};\r\n\r\nexport const createUser = (userName, firstName, lastName, password) => {\r\n    return async (dispatch) => {\r\n        const userData = {\r\n            isActive: true,\r\n            userName,\r\n            firstName,\r\n            lastName,\r\n            password,\r\n        };\r\n\r\n        let response = await userApi.createUser(userData);\r\n        if (response.resultCode === 0) {\r\n            dispatch(setUserData({...userData, userId: response.data.id}));\r\n            dispatch(setEditMode(false));\r\n        } else {\r\n            if (response.data.username) {\r\n                dispatch(stopSubmit('user', {userName: response.data.username}))\r\n            } else {\r\n                dispatch(stopSubmit('user', {_error: 'Some server error'}))\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default userReducer;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    user: userReducer,\r\n    form: formReducer,\r\n});\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk),\r\n);\r\n\r\nexport default store;\r\n\r\n","export const required = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n};\r\n\r\nconst maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbols!`;\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const maxLength150 = maxLengthCreator(150);\r\nexport const maxLength128 = maxLengthCreator(128);\r\nexport const maxLength30 = maxLengthCreator(30);\r\n\r\n\r\nexport const userNamePattern = (value) => {\r\n    if (/^[\\w.@+-]+$/.test(value)) return undefined;\r\n    return 'Illegal character. Letters, digits and @/./+/-/_ only!';\r\n};\r\n\r\nexport const passwordPattern = (value) => {\r\n    if (/^(?=.*[A-Z])(?=.*\\d).{8,}$/.test(value)) return undefined;\r\n    return 'Password should be 8+ characters, 1 capital, 1 numeric';\r\n};\r\n","import React from \"react\";\r\nimport './FormElemets.css'\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const inputClassName = 'Form-Input' + (meta.touched && meta.error ? ' FormError-Input' : '');\r\n    return (\r\n        <>\r\n            <input {...input}{...props} className={inputClassName}/>\r\n            {meta.touched && meta.error && (\r\n                <div className='FormError-Text'>{meta.error}</div>\r\n            )}\r\n        </>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {required} from \"../../../utils/validators\";\r\nimport {Input} from \"../../../utils/FormElements\";\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form\r\n            className='Form'\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <div>\r\n                <Field\r\n                    placeholder='Login'\r\n                    name='login'\r\n                    type='text'\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder='Password'\r\n                    name='password'\r\n                    type='password'\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            {props.error && (\r\n                <div className=\"FormError-GlobalError\">\r\n                    {props.error}\r\n                </div>\r\n            )}\r\n            <div>\r\n                <button className='Form-Button'>submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: 'login'})(LoginForm);\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {authorizeUser} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Login = (props) => {\r\n    const onLoginFormSubmit = (formData) => {\r\n        props.authorizeUser(formData.login, formData.password);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return (\r\n            <Redirect to='/user'/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm\r\n                onSubmit={onLoginFormSubmit}\r\n            />\r\n            <p>Username: test_super</p>\r\n            <p>Password: {'Nf<U4f<rDbtDxAPn'}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    authorizeUser,\r\n})(Login);\r\n","export const getIsUserCreated = (state) => state.user.userId !== null;\r\nexport const getUserId = (state) => state.user.userId;\r\nexport const getUserName = (state) => state.user.userName;\r\nexport const getFirstName = (state) => state.user.firstName;\r\nexport const getLastName = (state) => state.user.lastName;\r\nexport const getEditMode = (state) => state.user.editMode;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../utils/FormElements\";\r\nimport {\r\n    maxLength128,\r\n    maxLength150,\r\n    maxLength30,\r\n    passwordPattern,\r\n    required,\r\n    userNamePattern\r\n} from \"../../../utils/validators\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst UserForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='Username'\r\n                    name='userName'\r\n                    type='text'\r\n                    component={Input}\r\n                    validate={[required, userNamePattern, maxLength150,]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder='First Name'\r\n                    name='firstName'\r\n                    type='text'\r\n                    component={Input}\r\n                    validate={[maxLength30]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder='Last Name'\r\n                    name='lastName'\r\n                    type='text'\r\n                    component={Input}\r\n                    validate={[maxLength150]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder='Password'\r\n                    name='password'\r\n                    type='password'\r\n                    component={Input}\r\n                    validate={[required, maxLength128, passwordPattern]}\r\n                />\r\n            </div>\r\n            {props.error && (\r\n                <div className=\"FormError-GlobalError\">\r\n                    {props.error}\r\n                </div>\r\n            )}\r\n            <div>\r\n                <button className='Form-Button'>Save changes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default compose(\r\n    connect(state => ({\r\n        initialValues: state.user\r\n    }), {}),\r\n    reduxForm({form: 'user'}),\r\n)(UserForm);\r\n","export const getIsAuth = (state) => state.auth.isAuth;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {\r\n    getFirstName,\r\n    getLastName,\r\n    getUserId,\r\n    getUserName,\r\n    getIsUserCreated,\r\n    getEditMode\r\n} from \"../../redux/userSelectors\";\r\nimport UserForm from \"./UserForm/UserForm\";\r\nimport {getIsAuth} from \"../../redux/authSelectors\";\r\nimport {changeUser, createUser, setEditMode} from \"../../redux/userReducer\";\r\n\r\nconst User = (props) => {\r\n    const onUserFormSubmit = (formData) => {\r\n        if (props.isUserCreated) {\r\n            props.changeUser(props.userId, formData.userName, formData.firstName, formData.lastName, formData.password);\r\n        } else {\r\n            props.createUser(formData.userName, formData.firstName, formData.lastName, formData.password)\r\n        }\r\n    };\r\n\r\n    if (!props.isAuth) {\r\n        return (\r\n            <Redirect to='/login'/>\r\n        )\r\n    }\r\n    return (\r\n        <div className='User'>\r\n            <h1>User</h1>\r\n            {!props.editMode && (\r\n                <div>\r\n                    {props.isUserCreated && (\r\n                        <div>\r\n                            <p>username: {props.userName}</p>\r\n                            <p>First name: {props.firstName}</p>\r\n                            <p>Last name: {props.lastName}</p>\r\n                        </div>\r\n                    )}\r\n                    <button\r\n                        className='Form-Button'\r\n                        onClick={() => props.setEditMode(true)}\r\n                    >\r\n                        {props.isUserCreated ? 'Change User' : 'Create User'}\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {props.editMode && (\r\n                <UserForm onSubmit={onUserFormSubmit}/>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        isUserCreated: getIsUserCreated(state),\r\n        userId: getUserId(state),\r\n        userName: getUserName(state),\r\n        firstName: getFirstName(state),\r\n        lastName: getLastName(state),\r\n        editMode: getEditMode(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeUser,\r\n    createUser,\r\n    setEditMode,\r\n})(User);\r\n","import React from 'react';\nimport './App.css';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport Login from \"./components/Login/Login\";\nimport User from \"./components/User/User\";\n\nfunction App() {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <div className='App'>\n                    <div className='Container'>\n                        <Switch>\n                            <Redirect exact from='/' to='/login'/>\n                            <Route path='/login' render={() => <Login/>}/>\n                            <Route path='/user' render={() => <User/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </Provider>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}